// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                  @id @default(uuid())
  name                    String                  @unique()
  email                   String                  @unique()
  password                String
  createAt                DateTime                @default(now())
  updateAt                DateTime                @updatedAt()
  operations              Operation[]
  categories              Category[]
  userRelationGroups      UserRelationGroupUser[]
  refreshTokens           RefreshToken[]         
  sentInvitations         Invitation[]            @relation("SentInvitations")
  receivedInvitations     Invitation[]            @relation("ReceivedInvitations")
  groupCreator            UserRelationGroup[]
  categoryGroupMapping    PersonalCategoryMap[]
}

model UserRelationGroup {
  id              String          @id @default(uuid())
  name            String
  createAt        DateTime        @default(now())
  updateAt        DateTime        @updatedAt()
  users           UserRelationGroupUser[]
  invitations     Invitation[]
  creator         User            @relation(fields: [creatorId], references: [id])
  creatorId       String
  userGroupCategory GroupCategory[]
}

model UserRelationGroupUser {
  id                  String            @id @default(uuid())
  user                User              @relation(fields: [userId], references: [id])
  userId              String          
  userRelationGroup   UserRelationGroup @relation(fields: [userRelationGroupId], references: [id], onDelete: Cascade)
  userRelationGroupId String
}

model GroupCategory {
  id                  String           @id @default(uuid())
  name                String
  group               UserRelationGroup @relation(fields: [groupId], references: [id])
  groupId             String
  personalCategories  PersonalCategoryMap[]
  
  @@unique([name, groupId])
}

model PersonalCategoryMap {
  id                String        @id @default(uuid())
  groupCategory     GroupCategory @relation(fields: [groupCategoryId], references: [id])
  personalCategory  Category      @relation(fields: [categoryId], references: [id])
  groupCategoryId                 String
  categoryId        String
  user              User          @relation(fields: [userId], references: [id])
  userId            String

  @@unique([groupCategoryId, categoryId, userId])
}


model Operation {
  id              String          @id @default(uuid())
  name            String      
  category        Category        @relation(fields: [categoryId], references: [id])
  categoryId      String
  value           Int
  type            OperationType   @default(EXPENSE)
  createAt        DateTime        @default(now())
  updateAt        DateTime        @updatedAt()
  operationDate   DateTime
  user            User            @relation(fields: [userId], references: [id])
  userId          String
}

model Category {
  id              String          @id @default(uuid())
  name            String          
  createAt        DateTime        @default(now())
  updateAt        DateTime        @updatedAt()
  operations      Operation[]
  user            User?            @relation(fields: [userId], references: [id])
  userId          String?
  categoryType    OperationType   @default(EXPENSE)
  isDefault       Boolean         @default(false)
  defaultKey      String?
  groupsMapping   PersonalCategoryMap[]

  @@unique([name, userId, categoryType])
  @@unique([defaultKey, userId])
}

enum OperationType {
  EXPENSE
  INCOME
}

model RefreshToken {
  id              String          @id @default(uuid())
  token           String
  createAt        DateTime        @default(now())
  updateAt        DateTime        @updatedAt()
  user            User            @relation(fields: [userId], references: [id])
  userId          String
  deviceId        String
  expiresAt       DateTime
  userAgent       String

  @@index([userId, deviceId])
  @@unique([userId, deviceId])
}

model Invitation {
  id           String           @id @default(uuid())
  sender       User             @relation(name: "SentInvitations", fields: [senderId], references: [id])
  senderId     String
  recipient    User             @relation(name: "ReceivedInvitations", fields: [recipientId], references: [id])
  recipientId  String
  group        UserRelationGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId      String
  status       InvitationStatus @default(PENDING)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt()

  @@unique([recipientId, groupId], name: "active_invitation")
  @@index([recipientId, status])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}